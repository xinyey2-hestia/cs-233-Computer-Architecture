$date
	Wed Nov  8 19:53:52 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 32 ! out [31:0] $end
$var reg 1 " clk $end
$var reg 1 # done $end
$var reg 1 $ reset $end
$scope module pam $end
$var wire 1 % clk $end
$var wire 32 & data [31:0] $end
$var wire 32 ' data_2 [31:0] $end
$var wire 30 ( index [31:2] $end
$var wire 32 ) next_data [31:0] $end
$var wire 30 * next_index [31:2] $end
$var wire 32 + out [31:0] $end
$var wire 1 , reset $end
$scope module Counter $end
$var wire 1 % clk $end
$var wire 30 - d [29:0] $end
$var wire 1 . enable $end
$var wire 1 , reset $end
$var reg 30 / q [29:0] $end
$upscope $end
$scope module Adder $end
$var wire 30 0 in1 [29:0] $end
$var wire 30 1 in2 [29:0] $end
$var wire 30 2 out [29:0] $end
$upscope $end
$scope module rom $end
$var wire 30 3 addr [29:0] $end
$var wire 32 4 data [31:0] $end
$var reg 32 5 i [31:0] $end
$upscope $end
$scope module www $end
$var wire 1 % clk $end
$var wire 32 6 d [31:0] $end
$var wire 1 7 enable $end
$var wire 1 , reset $end
$var reg 32 8 q [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 9 control [2:0] $end
$var wire 32 : inA [31:0] $end
$var wire 32 ; inB [31:0] $end
$var wire 32 < out [31:0] $end
$var wire 1 = zero $end
$upscope $end
$scope module Register $end
$var wire 1 % clk $end
$var wire 32 > d [31:0] $end
$var wire 1 ? enable $end
$var wire 1 , reset $end
$var reg 32 @ q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @
1?
bx >
x=
bx <
bx ;
bx :
b0 9
bx 8
17
bx 6
b100000000 5
bx 4
bx 3
bx 2
b1 1
bx 0
bx /
1.
bx -
1,
bx +
bx *
bx )
bx (
bx '
bx &
0%
1$
0#
0"
bx !
$end
#1
b0 /
b0 (
b0 0
b0 3
b0 8
b0 '
b0 ;
b0 @
b0 !
b0 +
b0 :
1"
1%
#2
1=
0"
0%
#3
1"
1%
b0 )
b0 <
b0 >
b1 &
b1 4
b1 6
b1 *
b1 -
b1 2
#4
0"
0%
#5
1"
1%
#6
0"
0%
#7
1"
1%
#8
0"
0%
#9
1"
1%
#10
0"
0%
#11
1"
1%
#12
0"
0%
#13
b1 /
b1 (
b1 0
b1 3
b1 8
b1 '
b1 ;
1"
1%
0$
0,
#14
0=
0"
0%
#15
b1 @
b1 !
b1 +
b1 :
b10 8
b10 '
b10 ;
b10 /
b10 (
b10 0
b10 3
1"
1%
b1 )
b1 <
b1 >
b10 &
b10 4
b10 6
b10 *
b10 -
b10 2
#16
0"
0%
#17
b11 /
b11 (
b11 0
b11 3
b100 8
b100 '
b100 ;
b11 @
b11 !
b11 +
b11 :
1"
1%
b11 )
b11 <
b11 >
b100 &
b100 4
b100 6
b11 *
b11 -
b11 2
#18
0"
0%
#19
b111 @
b111 !
b111 +
b111 :
b1000 8
b1000 '
b1000 ;
b100 /
b100 (
b100 0
b100 3
1"
1%
b111 )
b111 <
b111 >
b1000 &
b1000 4
b1000 6
b100 *
b100 -
b100 2
#20
0"
0%
#21
b101 /
b101 (
b101 0
b101 3
b10000 8
b10000 '
b10000 ;
b1111 @
b1111 !
b1111 +
b1111 :
1"
1%
b1111 )
b1111 <
b1111 >
b10000 &
b10000 4
b10000 6
b101 *
b101 -
b101 2
#22
0"
0%
#23
b11111 @
b11111 !
b11111 +
b11111 :
b100000 8
b100000 '
b100000 ;
b110 /
b110 (
b110 0
b110 3
1"
1%
b11111 )
b11111 <
b11111 >
b100000 &
b100000 4
b100000 6
b110 *
b110 -
b110 2
#24
0"
0%
#25
b111 /
b111 (
b111 0
b111 3
b1000000 8
b1000000 '
b1000000 ;
b111111 @
b111111 !
b111111 +
b111111 :
1"
1%
b111111 )
b111111 <
b111111 >
b1000000 &
b1000000 4
b1000000 6
b111 *
b111 -
b111 2
#26
0"
0%
#27
b1111111 @
b1111111 !
b1111111 +
b1111111 :
b10000000 8
b10000000 '
b10000000 ;
b1000 /
b1000 (
b1000 0
b1000 3
1"
1%
b1111111 )
b1111111 <
b1111111 >
b10000000 &
b10000000 4
b10000000 6
b1000 *
b1000 -
b1000 2
#28
0"
0%
#29
b1001 /
b1001 (
b1001 0
b1001 3
b0 8
b0 '
b0 ;
b11111111 @
b11111111 !
b11111111 +
b11111111 :
1"
1%
b11111111 )
b11111111 <
b11111111 >
b0 &
b0 4
b0 6
b1001 *
b1001 -
b1001 2
#30
0"
0%
#31
b1010 /
b1010 (
b1010 0
b1010 3
1"
1%
b1010 *
b1010 -
b1010 2
#32
0"
0%
#33
b1011 /
b1011 (
b1011 0
b1011 3
1"
1%
b1011 *
b1011 -
b1011 2
#34
0"
0%
#35
b1100 /
b1100 (
b1100 0
b1100 3
1"
1%
b1100 *
b1100 -
b1100 2
#36
0"
0%
#37
b1101 /
b1101 (
b1101 0
b1101 3
1"
1%
b1101 *
b1101 -
b1101 2
#38
0"
0%
#39
b1110 /
b1110 (
b1110 0
b1110 3
1"
1%
b1110 *
b1110 -
b1110 2
#40
0"
0%
#41
b1111 /
b1111 (
b1111 0
b1111 3
1"
1%
b1111 *
b1111 -
b1111 2
#42
0"
0%
#43
b10000 /
b10000 (
b10000 0
b10000 3
1"
1%
b10000 *
b10000 -
b10000 2
#44
0"
0%
#45
b10001 /
b10001 (
b10001 0
b10001 3
1"
1%
b10001 *
b10001 -
b10001 2
#46
0"
0%
#47
b10010 /
b10010 (
b10010 0
b10010 3
1"
1%
b10010 *
b10010 -
b10010 2
#48
0"
0%
#49
b10011 /
b10011 (
b10011 0
b10011 3
1"
1%
b10011 *
b10011 -
b10011 2
#50
0"
0%
#51
b10100 /
b10100 (
b10100 0
b10100 3
1"
1%
b10100 *
b10100 -
b10100 2
#52
0"
0%
#53
b10101 /
b10101 (
b10101 0
b10101 3
1"
1%
b10101 *
b10101 -
b10101 2
#54
0"
0%
#55
b10110 /
b10110 (
b10110 0
b10110 3
1"
1%
b10110 *
b10110 -
b10110 2
#56
0"
0%
#57
b10111 /
b10111 (
b10111 0
b10111 3
1"
1%
b10111 *
b10111 -
b10111 2
#58
0"
0%
#59
b11000 /
b11000 (
b11000 0
b11000 3
1"
1%
b11000 *
b11000 -
b11000 2
#60
0"
0%
#61
b11001 /
b11001 (
b11001 0
b11001 3
1"
1%
b11001 *
b11001 -
b11001 2
#62
0"
0%
#63
b11010 /
b11010 (
b11010 0
b11010 3
1"
1%
b11010 *
b11010 -
b11010 2
1#
