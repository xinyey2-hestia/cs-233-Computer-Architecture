$date
	Sun Oct  8 17:40:52 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_test $end
$var wire 1 ! addm $end
$var wire 3 " alu_op [2:0] $end
$var wire 1 # alu_src2 $end
$var wire 1 $ byte_load $end
$var wire 1 % byte_we $end
$var wire 2 & control_type [1:0] $end
$var wire 1 ' except $end
$var wire 1 ( lui $end
$var wire 1 ) mem_read $end
$var wire 1 * rd_src $end
$var wire 1 + slt $end
$var wire 1 , word_we $end
$var wire 1 - writeenable $end
$var reg 6 . funct [5:0] $end
$var reg 6 / opcode [5:0] $end
$var reg 1 0 zero $end
$scope module decoder $end
$var wire 1 1 addi $end
$var wire 1 ! addm $end
$var wire 3 2 alu_op [2:0] $end
$var wire 1 # alu_src2 $end
$var wire 1 3 andi $end
$var wire 1 4 beq $end
$var wire 1 5 bne $end
$var wire 1 $ bte_load $end
$var wire 1 % bte_we $end
$var wire 2 6 control_tpe [1:0] $end
$var wire 1 ' except $end
$var wire 6 7 funct [5:0] $end
$var wire 1 8 j $end
$var wire 1 9 jr $end
$var wire 1 : lbu $end
$var wire 1 ( lui $end
$var wire 1 ; lw $end
$var wire 1 ) mem_read $end
$var wire 6 < opcode [5:0] $end
$var wire 1 = ori $end
$var wire 1 * rd_src $end
$var wire 1 > sadd $end
$var wire 1 ? sand $end
$var wire 1 @ sb $end
$var wire 1 + slt $end
$var wire 1 A snor $end
$var wire 1 B sor $end
$var wire 1 C ssub $end
$var wire 1 D sw $end
$var wire 1 E sxor $end
$var wire 1 , word_we $end
$var wire 1 - writeenable $end
$var wire 1 F xori $end
$var wire 1 G zero $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0G
1F
0E
0D
0C
0B
0A
0@
0?
0>
0=
b1110 <
0;
0:
09
08
bx 7
b0 6
05
04
03
b111 2
01
00
b1110 /
bx .
1-
0,
0+
1*
0)
0(
0'
b0 &
0%
0$
1#
b111 "
0!
$end
#10
b0 "
b0 2
0-
0*
0#
b10 &
b10 6
b10 /
b10 <
0F
18
#20
b11 &
b11 6
19
b1000 .
b1000 7
b0 /
b0 <
08
#30
b10 "
b10 2
1-
1*
1#
b0 &
b0 6
1)
09
b100011 /
b100011 <
1;
#40
b100100 /
b100100 <
0;
1:
1$
#50
0-
0*
0)
b101011 /
b101011 <
0:
0$
1D
1,
#60
b101000 /
b101000 <
0D
0,
1@
1%
#70
1-
1*
b0 "
b0 2
0#
b1111 /
b1111 <
1(
0@
0%
#80
b11 "
b11 2
0*
1+
b101010 .
b101010 7
b0 /
b0 <
0(
#90
0-
0+
b100 /
b100 <
14
#100
b1 &
b1 6
10
1G
#110
b1 &
b1 6
00
0G
b101 /
b101 <
15
04
#120
b0 &
b0 6
10
1G
#130
